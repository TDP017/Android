package se.magnussuther.aes;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.os.Bundle;
import android.os.Environment;

public class MainActivity extends Activity implements MainViewEvents {
	private static final String TAG = "AES MainActivity";
			
	private MainView mMainView = null;	
	private ImageFetcher mImageFetcher = null;
	private AES mAES = null;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        mMainView = (MainView) findViewById(R.id.mainview);
        mMainView.registerEventListener(this);
        
        mImageFetcher = new ImageFetcher();
        
        byte[] iv = {0xA,1,0xB,5,4,0xF,7,9,0x17,3,1,6,8,0xC,0xD,91};
        byte[] salt = {0,1,2,3,4,5,6,7,8,9,0xA,0xB,0xC,0xD,0xE,0xF};
        mAES = new AES("secretdonald", "PBEWITHSHAANDTWOFISH-CBC", "AES/CBC/PKCS7Padding", iv, salt, 10000, 256);
        
        
        try {
        	TimeLogger.start("MainActivity: Encrypting image");
            byte[] encrypted = encryptImage(Environment.getExternalStorageDirectory() + "/AES/donald-orig.jpg");
            TimeLogger.stop();
            File f = new File(Environment.getExternalStorageDirectory() + "/AES/donald-encrypted.enc");
            f.createNewFile();
            TimeLogger.start("MainActivity: Saving encrypted image to SD card")
        	BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(f));
        	bos.write(encrypted);
        	TimeLogger.stop();
        } catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

        // The encrypted image will be decrypted on the next
        // mMainView.onDraw(), which will happen soon...
    }

	private byte[] encryptImage(final String imagePath) {
		try {
			byte[] origImage = mImageFetcher.getImageBytes(imagePath);
			return mAES.getEncrypter().encryptData(origImage);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidKeyException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidKeySpecException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchPaddingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidAlgorithmParameterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalBlockSizeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (BadPaddingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}
    
	
	private byte[] decryptImage(final String imagePath) {
		try {
			byte[] encrypted = mImageFetcher.getImageBytes(imagePath);
			return mAES.getDecrypter().decryptData(encrypted);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidKeyException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchPaddingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidKeySpecException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidAlgorithmParameterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalBlockSizeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (BadPaddingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}

	public void onMainViewDraw(Canvas canvas) {
        byte[] original = decryptImage(Environment.getExternalStorageDirectory() + "/AES/donald-encrypted.enc");
        // Well, this certainly is a waste of memory, but is needed to get an immutable Bitmap:
        Bitmap bm = BitmapFactory.decodeByteArray(original, 0, original.length).copy(Bitmap.Config.ARGB_8888, true);
        
        canvas.drawBitmap(bm, 0, 0, null);
	}
}


